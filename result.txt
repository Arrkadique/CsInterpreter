int : VARIABLE_TYPE
[ : K_LBRACKET
] : K_RBRACKET
nums : VARIABLE
= : EQUAL
{ : F_LBRACKET
54 : NUMBER
, : SYNTAX_SYMBOL
7 : NUMBER
, : SYNTAX_SYMBOL
2 : NUMBER
, : SYNTAX_SYMBOL
4 : NUMBER
, : SYNTAX_SYMBOL
2 : NUMBER
, : SYNTAX_SYMBOL
89 : NUMBER
, : SYNTAX_SYMBOL
33 : NUMBER
, : SYNTAX_SYMBOL
12 : NUMBER
} : F_RBRACKET
; : SEMICOLON
int : VARIABLE_TYPE
b : VARIABLE
= : EQUAL
150 : NUMBER
; : SEMICOLON
int : VARIABLE_TYPE
a : VARIABLE
= : EQUAL
0 : NUMBER
; : SEMICOLON
int : VARIABLE_TYPE
temp : VARIABLE
= : EQUAL
0 : NUMBER
; : SEMICOLON
for : CYCLES
( : LBRACKET
int : VARIABLE_TYPE
i : VARIABLE
= : EQUAL
0 : NUMBER
; : SEMICOLON
i : VARIABLE
< : BIN_OPERATION
7 : NUMBER
; : SEMICOLON
i : VARIABLE
++ : INC
) : RBRACKET
{ : F_LBRACKET
for : CYCLES
( : LBRACKET
int : VARIABLE_TYPE
j : VARIABLE
= : EQUAL
i : VARIABLE
+ : OPERATION
1 : NUMBER
; : SEMICOLON
j : VARIABLE
< : BIN_OPERATION
8 : NUMBER
; : SEMICOLON
j : VARIABLE
++ : INC
) : RBRACKET
{ : F_LBRACKET
if : IF_STATEMENT
( : LBRACKET
nums : VARIABLE
[ : K_LBRACKET
i : VARIABLE
] : K_RBRACKET
> : BIN_OPERATION
nums : VARIABLE
[ : K_LBRACKET
j : VARIABLE
] : K_RBRACKET
) : RBRACKET
{ : F_LBRACKET
temp : VARIABLE
= : EQUAL
nums : VARIABLE
[ : K_LBRACKET
i : VARIABLE
] : K_RBRACKET
; : SEMICOLON
nums : VARIABLE
[ : K_LBRACKET
i : VARIABLE
] : K_RBRACKET
= : EQUAL
nums : VARIABLE
[ : K_LBRACKET
j : VARIABLE
] : K_RBRACKET
; : SEMICOLON
nums : VARIABLE
[ : K_LBRACKET
j : VARIABLE
] : K_RBRACKET
= : EQUAL
temp : VARIABLE
; : SEMICOLON
} : F_RBRACKET
} : F_RBRACKET
} : F_RBRACKET
for : CYCLES
( : LBRACKET
int : VARIABLE_TYPE
i : VARIABLE
= : EQUAL
0 : NUMBER
; : SEMICOLON
i : VARIABLE
< : BIN_OPERATION
8 : NUMBER
; : SEMICOLON
i : VARIABLE
++ : INC
) : RBRACKET
{ : F_LBRACKET
Console.WriteLine : PRINT
( : LBRACKET
nums : VARIABLE
[ : K_LBRACKET
i : VARIABLE
] : K_RBRACKET
) : RBRACKET
; : SEMICOLON
} : F_RBRACKET
double : VARIABLE_TYPE
a : VARIABLE
= : EQUAL
23 : NUMBER
; : SEMICOLON
double : VARIABLE_TYPE
b : VARIABLE
= : EQUAL
23 : NUMBER
; : SEMICOLON
double : VARIABLE_TYPE
c : VARIABLE
= : EQUAL
24 : NUMBER
; : SEMICOLON
if : IF_STATEMENT
( : LBRACKET
b : VARIABLE
== : EQUAL
c : VARIABLE
) : RBRACKET
{ : F_LBRACKET
Console.WriteLine : PRINT
( : LBRACKET
b : VARIABLE
+ : OPERATION
c : VARIABLE
) : RBRACKET
; : SEMICOLON
} : F_RBRACKET
else : ELSE_STATEMENT
{ : F_LBRACKET
Console.Write : PRINT
( : LBRACKET
0 : NUMBER
) : RBRACKET
; : SEMICOLON
} : F_RBRACKET
if : IF_STATEMENT
( : LBRACKET
a : VARIABLE
== : EQUAL
b : VARIABLE
) : RBRACKET
{ : F_LBRACKET
Console.WriteLine : PRINT
( : LBRACKET
b : VARIABLE
+ : OPERATION
a : VARIABLE
) : RBRACKET
; : SEMICOLON
} : F_RBRACKET
if : IF_STATEMENT
( : LBRACKET
1 : NUMBER
> : BIN_OPERATION
2 : NUMBER
) : RBRACKET
{ : F_LBRACKET
boolean : VARIABLE_TYPE
a : VARIABLE
= : EQUAL
( : LBRACKET
1 : NUMBER
+ : OPERATION
2 : NUMBER
) : RBRACKET
< : BIN_OPERATION
( : LBRACKET
2 : NUMBER
+ : OPERATION
3 : NUMBER
) : RBRACKET
; : SEMICOLON
double : VARIABLE_TYPE
b : VARIABLE
= : EQUAL
4.2 : REAL_NUMBER
; : SEMICOLON
Console.WriteLine : PRINT
( : LBRACKET
a : VARIABLE
) : RBRACKET
; : SEMICOLON
Console.WriteLine : PRINT
( : LBRACKET
b : VARIABLE
) : RBRACKET
; : SEMICOLON
} : F_RBRACKET
else : ELSE_STATEMENT
{ : F_LBRACKET
a : VARIABLE
= : EQUAL
0 : NUMBER
; : SEMICOLON
Console.WriteLine : PRINT
( : LBRACKET
a : VARIABLE
) : RBRACKET
; : SEMICOLON
} : F_RBRACKET
